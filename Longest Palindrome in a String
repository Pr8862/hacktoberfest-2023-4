Given a string S, find the longest palindromic substring in S. Substring of string S: S[ i . . . . j ] where 0 ≤ i ≤ j < len(S). Palindrome string: A string that reads the same backward. More formally, S is a palindrome if reverse(S) = S. In case of conflict, return the substring which occurs first ( with the least starting index).

Example 1:

Input:
S = "aaaabbaa"
Output: aabbaa
Explanation: The longest Palindromic
substring is "aabbaa".



def longest_palindromic_substring(S):
    n = len(S)
    if n <= 1:
        return S

    # Create a table to store the palindrome information
    table = [[False] * n for _ in range(n)]

    start = 0
    max_length = 1

    # All substrings of length 1 are palindromes
    for i in range(n):
        table[i][i] = True

    # Check for palindromes of length 2
    for i in range(n - 1):
        if S[i] == S[i + 1]:
            table[i][i + 1] = True
            start = i
            max_length = 2

    # Check for palindromes of length 3 or more
    for k in range(3, n + 1):
        for i in range(n - k + 1):
            j = i + k - 1

            if S[i] == S[j] and table[i + 1][j - 1]:
                table[i][j] = True

                if k > max_length:
                    start = i
                    max_length = k

    return S[start:start + max_length]

# Example usage
S = "aaaabbaa"
result = longest_palindromic_substring(S)
print(result)  # Output: "aabbaa"
